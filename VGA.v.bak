module VGA (
    input wire clk,
    output reg HS,
    output reg VS,
    input wire [11:0] RGB_in,
    output reg [3:0] R_out,
    output reg [3:0] G_out,
    output reg [3:0] B_out,
    input wire pixel,
    output reg [9:0] x,
    output reg [9:0] y
);

    reg [9:0] hsync_counter;
    reg [9:0] vsync_counter;

    reg H_VIDEO;
    reg V_VIDEO;

    always @(posedge clk) begin
        if (hsync_counter == 799) begin
            hsync_counter <= 0;
        end else begin
            hsync_counter <= hsync_counter + 1;
        end

        case (hsync_counter)
            0: HS <= 1;
            703: HS <= 0;
            default: ;
        endcase

        case (hsync_counter)
            44 to 683: begin
                H_VIDEO <= 1;
                x <= hsync_counter - 44;
            end
            default: begin
                H_VIDEO <= 0;
                x <= 0;
            end
        endcase
    end

    always @(posedge HS) begin
        if (vsync_counter == 525) begin
            vsync_counter <= 0;
        end else begin
            vsync_counter <= vsync_counter + 1;
        end

        case (vsync_counter)
            0: VS <= 1;
            522: VS <= 0;
            default: ;
        endcase

        case (vsync_counter)
            30 to 509: begin
                V_VIDEO <= 1;
                y <= vsync_counter - 30;
            end
            default: begin
                V_VIDEO <= 0;
                y <= 0;
            end
        endcase
    end

    always @(posedge clk) begin
        if (V_VIDEO && H_VIDEO) begin
            if (pixel) begin
                // Display white
                R_out <= 4'b1111;
                G_out <= 4'b1111;
                B_out <= 4'b1111;
            end else begin
                // Display the given color in hex
                R_out <= RGB_in[11:8];
                G_out <= RGB_in[7:4];
                B_out <= RGB_in[3:0];
            end
        end else begin
            // Don't display anything
            R_out <= 4'b0000;
            G_out <= 4'b0000;
            B_out <= 4'b0000;
        end
    end
endmodule
